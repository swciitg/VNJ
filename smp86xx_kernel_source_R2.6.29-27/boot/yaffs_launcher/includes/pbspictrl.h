/***********************************************************************
 * Copyright (C) 2005-2011 Sigma Designs, Inc. 
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 **********************************************************************/

/*
  autogenerated from pbspictrl.rd

  must include rmdef.h, also define BFLOG and BFASSERT appropriately

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 2.1 as
 * published by the Free Software Foundation.
 */

#ifndef __PBSPICTRL_H__
#define __PBSPICTRL_H__

#define PBSPICTRL_B_SHIFT 31 /*  */
#define PBSPICTRL_B_WIDTH 1 
#define PBSPICTRL_DLY_SHIFT 29 /*  */
#define PBSPICTRL_DLY_WIDTH 2 
#define PBSPICTRL_SPISCKDELAY_SHIFT 24 /*  */
#define PBSPICTRL_SPISCKDELAY_WIDTH 5 
#define PBSPICTRL_DCA_SHIFT 22 /*  */
#define PBSPICTRL_DCA_WIDTH 2 
#define PBSPICTRL_DR_SHIFT 19 /*  */
#define PBSPICTRL_DR_WIDTH 1 
#define PBSPICTRL_FR_SHIFT 18 /*  */
#define PBSPICTRL_FR_WIDTH 1 
#define PBSPICTRL_IOW_SHIFT 16 /*  */
#define PBSPICTRL_IOW_WIDTH 2 
#define PBSPICTRL_BITCOUNT_SHIFT 8 /*  */
#define PBSPICTRL_BITCOUNT_WIDTH 7 
#define PBSPICTRL_STARTENDDELAY_SHIFT 0 /*  */
#define PBSPICTRL_STARTENDDELAY_WIDTH 8 

#define insPBSPICTRL(r1,r2,key) ins r1, r2, PBSPICTRL_ ## key ## _SHIFT, PBSPICTRL_ ## key ## _WIDTH
#define extPBSPICTRL(r1,r2,key) ext r1, r2, PBSPICTRL_ ## key ## _SHIFT, PBSPICTRL_ ## key ## _WIDTH

#ifndef __ASSEMBLY__

#define wPBSPICTRL(px,key,v) \
do { \
        BFASSERT(((v)>>PBSPICTRL_ ## key ## _WIDTH)==0,"too large\n"); \
        RMinsShiftBits(px,v,PBSPICTRL_ ## key ## _WIDTH,PBSPICTRL_ ## key ## _SHIFT); \
} \
while (0)

#define rPBSPICTRL(x,key) RMunshiftBits(x,PBSPICTRL_ ## key ## _WIDTH,PBSPICTRL_ ## key ##_SHIFT)

#ifdef BFPROTO
BFCLASS void logPBSPICTRL(RMuint32 x);
#endif
BFCLASS void logPBSPICTRL(RMuint32 x)
{
	RMuint32 v;
	
	BFLOG("PBSPICTRL: 0x%08lx is",x);

	v=RMunshiftBits(x,PBSPICTRL_B_WIDTH,PBSPICTRL_B_SHIFT);

        BFLOG(" B=0x%x",v);
        RMinsShiftBits(&x,0,PBSPICTRL_B_WIDTH,PBSPICTRL_B_SHIFT);

	v=RMunshiftBits(x,PBSPICTRL_DLY_WIDTH,PBSPICTRL_DLY_SHIFT);

        BFLOG(" DLY=0x%x",v);
        RMinsShiftBits(&x,0,PBSPICTRL_DLY_WIDTH,PBSPICTRL_DLY_SHIFT);

	v=RMunshiftBits(x,PBSPICTRL_SPISCKDELAY_WIDTH,PBSPICTRL_SPISCKDELAY_SHIFT);

        BFLOG(" SPISCKDELAY=0x%x",v);
        RMinsShiftBits(&x,0,PBSPICTRL_SPISCKDELAY_WIDTH,PBSPICTRL_SPISCKDELAY_SHIFT);

	v=RMunshiftBits(x,PBSPICTRL_DCA_WIDTH,PBSPICTRL_DCA_SHIFT);

        BFLOG(" DCA=0x%x",v);
        RMinsShiftBits(&x,0,PBSPICTRL_DCA_WIDTH,PBSPICTRL_DCA_SHIFT);

	v=RMunshiftBits(x,PBSPICTRL_DR_WIDTH,PBSPICTRL_DR_SHIFT);

        BFLOG(" DR=0x%x",v);
        RMinsShiftBits(&x,0,PBSPICTRL_DR_WIDTH,PBSPICTRL_DR_SHIFT);

	v=RMunshiftBits(x,PBSPICTRL_FR_WIDTH,PBSPICTRL_FR_SHIFT);

        BFLOG(" FR=0x%x",v);
        RMinsShiftBits(&x,0,PBSPICTRL_FR_WIDTH,PBSPICTRL_FR_SHIFT);

	v=RMunshiftBits(x,PBSPICTRL_IOW_WIDTH,PBSPICTRL_IOW_SHIFT);

        BFLOG(" IOW=0x%x",v);
        RMinsShiftBits(&x,0,PBSPICTRL_IOW_WIDTH,PBSPICTRL_IOW_SHIFT);

	v=RMunshiftBits(x,PBSPICTRL_BITCOUNT_WIDTH,PBSPICTRL_BITCOUNT_SHIFT);

        BFLOG(" BITCOUNT=0x%x",v);
        RMinsShiftBits(&x,0,PBSPICTRL_BITCOUNT_WIDTH,PBSPICTRL_BITCOUNT_SHIFT);

	v=RMunshiftBits(x,PBSPICTRL_STARTENDDELAY_WIDTH,PBSPICTRL_STARTENDDELAY_SHIFT);

        BFLOG(" STARTENDDELAY=0x%x",v);
        RMinsShiftBits(&x,0,PBSPICTRL_STARTENDDELAY_WIDTH,PBSPICTRL_STARTENDDELAY_SHIFT);

	if (x) {
		int i=0;
		
		BFLOG(" (?");
		
		while (1) {
			if (x&1) 
				BFLOG(" %d",i);
			x>>=1;
			if (x==0)
				break;
			i++;
		}
		BFLOG(")");
	}
	
	BFLOG("\n");
}

union PBSPICTRLReg {
        struct { RMuint32 // lsbs...
                STARTENDDELAY: 8,
                BITCOUNT: 7,
                                                hole16: 1,
                IOW: 2,
                FR: 1,
                DR: 1,
                                                hole22: 2,
                DCA: 2,
                SPISCKDELAY: 5,
                DLY: 2,
                B: 1; // ... to msbs
        } bits;

        RMuint32 value;
};

#endif /* __ASSEMBLY__ */

#endif /* __PBSPICTRL_H__ */
