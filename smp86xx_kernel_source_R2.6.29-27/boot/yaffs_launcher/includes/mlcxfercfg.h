/***********************************************************************
 * Copyright (C) 2005-2011 Sigma Designs, Inc. 
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 **********************************************************************/

/*
  autogenerated from mlcxfercfg.rd

  must include rmdef.h, also define BFLOG and BFASSERT appropriately

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 2.1 as
 * published by the Free Software Foundation.
 */

#ifndef __MLCXFERCFG_H__
#define __MLCXFERCFG_H__

#define MLCXFERCFG_dc_SHIFT 31 /*  */
#define MLCXFERCFG_dc_WIDTH 1 
#define MLCXFERCFG_sp_SHIFT 28 /*  */
#define MLCXFERCFG_sp_WIDTH 1 
#define MLCXFERCFG_cesel_SHIFT 24 /*  */
#define MLCXFERCFG_cesel_WIDTH 2 
#define MLCXFERCFG_pagecount_SHIFT 16 /*  */
#define MLCXFERCFG_pagecount_WIDTH 5 
#define MLCXFERCFG_packetcount_SHIFT 8 /*  */
#define MLCXFERCFG_packetcount_WIDTH 4 
#define MLCXFERCFG_meta_size_SHIFT 0 /*  */
#define MLCXFERCFG_meta_size_WIDTH 5 

#define insMLCXFERCFG(r1,r2,key) ins r1, r2, MLCXFERCFG_ ## key ## _SHIFT, MLCXFERCFG_ ## key ## _WIDTH
#define extMLCXFERCFG(r1,r2,key) ext r1, r2, MLCXFERCFG_ ## key ## _SHIFT, MLCXFERCFG_ ## key ## _WIDTH

#ifndef __ASSEMBLY__

#define wMLCXFERCFG(px,key,v) \
do { \
        BFASSERT(((v)>>MLCXFERCFG_ ## key ## _WIDTH)==0,"too large\n"); \
        RMinsShiftBits(px,v,MLCXFERCFG_ ## key ## _WIDTH,MLCXFERCFG_ ## key ## _SHIFT); \
} \
while (0)

#define rMLCXFERCFG(x,key) RMunshiftBits(x,MLCXFERCFG_ ## key ## _WIDTH,MLCXFERCFG_ ## key ##_SHIFT)

#ifdef BFPROTO
BFCLASS void logMLCXFERCFG(RMuint32 x);
#endif
BFCLASS void logMLCXFERCFG(RMuint32 x)
{
	RMuint32 v;
	
	BFLOG("MLCXFERCFG: 0x%08lx is",x);

	v=RMunshiftBits(x,MLCXFERCFG_dc_WIDTH,MLCXFERCFG_dc_SHIFT);

        BFLOG(" dc=0x%x",v);
        RMinsShiftBits(&x,0,MLCXFERCFG_dc_WIDTH,MLCXFERCFG_dc_SHIFT);

	v=RMunshiftBits(x,MLCXFERCFG_sp_WIDTH,MLCXFERCFG_sp_SHIFT);

        BFLOG(" sp=0x%x",v);
        RMinsShiftBits(&x,0,MLCXFERCFG_sp_WIDTH,MLCXFERCFG_sp_SHIFT);

	v=RMunshiftBits(x,MLCXFERCFG_cesel_WIDTH,MLCXFERCFG_cesel_SHIFT);

        BFLOG(" cesel=0x%x",v);
        RMinsShiftBits(&x,0,MLCXFERCFG_cesel_WIDTH,MLCXFERCFG_cesel_SHIFT);

	v=RMunshiftBits(x,MLCXFERCFG_pagecount_WIDTH,MLCXFERCFG_pagecount_SHIFT);

        BFLOG(" pagecount=0x%x",v);
        RMinsShiftBits(&x,0,MLCXFERCFG_pagecount_WIDTH,MLCXFERCFG_pagecount_SHIFT);

	v=RMunshiftBits(x,MLCXFERCFG_packetcount_WIDTH,MLCXFERCFG_packetcount_SHIFT);

        BFLOG(" packetcount=0x%x",v);
        RMinsShiftBits(&x,0,MLCXFERCFG_packetcount_WIDTH,MLCXFERCFG_packetcount_SHIFT);

	v=RMunshiftBits(x,MLCXFERCFG_meta_size_WIDTH,MLCXFERCFG_meta_size_SHIFT);

        BFLOG(" meta_size=0x%x",v);
        RMinsShiftBits(&x,0,MLCXFERCFG_meta_size_WIDTH,MLCXFERCFG_meta_size_SHIFT);

	if (x) {
		int i=0;
		
		BFLOG(" (?");
		
		while (1) {
			if (x&1) 
				BFLOG(" %d",i);
			x>>=1;
			if (x==0)
				break;
			i++;
		}
		BFLOG(")");
	}
	
	BFLOG("\n");
}

union MLCXFERCFGReg {
        struct { RMuint32 // lsbs...
                meta_size: 5,
                                                hole8: 3,
                packetcount: 4,
                                                hole16: 4,
                pagecount: 5,
                                                hole24: 3,
                cesel: 2,
                                                hole28: 2,
                sp: 1,
                                                hole31: 2,
                dc: 1; // ... to msbs
        } bits;

        RMuint32 value;
};

#endif /* __ASSEMBLY__ */

#endif /* __MLCXFERCFG_H__ */
