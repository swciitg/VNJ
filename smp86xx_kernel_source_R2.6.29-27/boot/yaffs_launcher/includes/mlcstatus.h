/***********************************************************************
 * Copyright (C) 2005-2011 Sigma Designs, Inc. 
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 **********************************************************************/

/*
  autogenerated from mlcstatus.rd

  must include rmdef.h, also define BFLOG and BFASSERT appropriately

 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 2.1 as
 * published by the Free Software Foundation.
 */

#ifndef __MLCSTATUS_H__
#define __MLCSTATUS_H__

#define MLCSTATUS_R_SHIFT 31 /*  */
#define MLCSTATUS_R_WIDTH 1 
#define MLCSTATUS_ch_SHIFT 22 /*  */
#define MLCSTATUS_ch_WIDTH 1 
#define MLCSTATUS_ce_SHIFT 21 /*  */
#define MLCSTATUS_ce_WIDTH 1 
#define MLCSTATUS_ctrl_status_SHIFT 16 /*  */
#define MLCSTATUS_ctrl_status_WIDTH 5 
#define MLCSTATUS_ch_page_SHIFT 8 /*  */
#define MLCSTATUS_ch_page_WIDTH 5 
#define MLCSTATUS_ch_status_SHIFT 0 /*  */
#define MLCSTATUS_ch_status_WIDTH 4 

#define insMLCSTATUS(r1,r2,key) ins r1, r2, MLCSTATUS_ ## key ## _SHIFT, MLCSTATUS_ ## key ## _WIDTH
#define extMLCSTATUS(r1,r2,key) ext r1, r2, MLCSTATUS_ ## key ## _SHIFT, MLCSTATUS_ ## key ## _WIDTH

#ifndef __ASSEMBLY__

#define wMLCSTATUS(px,key,v) \
do { \
        BFASSERT(((v)>>MLCSTATUS_ ## key ## _WIDTH)==0,"too large\n"); \
        RMinsShiftBits(px,v,MLCSTATUS_ ## key ## _WIDTH,MLCSTATUS_ ## key ## _SHIFT); \
} \
while (0)

#define rMLCSTATUS(x,key) RMunshiftBits(x,MLCSTATUS_ ## key ## _WIDTH,MLCSTATUS_ ## key ##_SHIFT)

#ifdef BFPROTO
BFCLASS void logMLCSTATUS(RMuint32 x);
#endif
BFCLASS void logMLCSTATUS(RMuint32 x)
{
	RMuint32 v;
	
	BFLOG("MLCSTATUS: 0x%08lx is",x);

	v=RMunshiftBits(x,MLCSTATUS_R_WIDTH,MLCSTATUS_R_SHIFT);

        BFLOG(" R=0x%x",v);
        RMinsShiftBits(&x,0,MLCSTATUS_R_WIDTH,MLCSTATUS_R_SHIFT);

	v=RMunshiftBits(x,MLCSTATUS_ch_WIDTH,MLCSTATUS_ch_SHIFT);

        BFLOG(" ch=0x%x",v);
        RMinsShiftBits(&x,0,MLCSTATUS_ch_WIDTH,MLCSTATUS_ch_SHIFT);

	v=RMunshiftBits(x,MLCSTATUS_ce_WIDTH,MLCSTATUS_ce_SHIFT);

        BFLOG(" ce=0x%x",v);
        RMinsShiftBits(&x,0,MLCSTATUS_ce_WIDTH,MLCSTATUS_ce_SHIFT);

	v=RMunshiftBits(x,MLCSTATUS_ctrl_status_WIDTH,MLCSTATUS_ctrl_status_SHIFT);

        BFLOG(" ctrl_status=0x%x",v);
        RMinsShiftBits(&x,0,MLCSTATUS_ctrl_status_WIDTH,MLCSTATUS_ctrl_status_SHIFT);

	v=RMunshiftBits(x,MLCSTATUS_ch_page_WIDTH,MLCSTATUS_ch_page_SHIFT);

        BFLOG(" ch_page=0x%x",v);
        RMinsShiftBits(&x,0,MLCSTATUS_ch_page_WIDTH,MLCSTATUS_ch_page_SHIFT);

	v=RMunshiftBits(x,MLCSTATUS_ch_status_WIDTH,MLCSTATUS_ch_status_SHIFT);

        BFLOG(" ch_status=0x%x",v);
        RMinsShiftBits(&x,0,MLCSTATUS_ch_status_WIDTH,MLCSTATUS_ch_status_SHIFT);

	if (x) {
		int i=0;
		
		BFLOG(" (?");
		
		while (1) {
			if (x&1) 
				BFLOG(" %d",i);
			x>>=1;
			if (x==0)
				break;
			i++;
		}
		BFLOG(")");
	}
	
	BFLOG("\n");
}

union MLCSTATUSReg {
        struct { RMuint32 // lsbs...
                ch_status: 4,
                                                hole8: 4,
                ch_page: 5,
                                                hole16: 3,
                ctrl_status: 5,
                ce: 1,
                ch: 1,
                                                hole31: 8,
                R: 1; // ... to msbs
        } bits;

        RMuint32 value;
};

#endif /* __ASSEMBLY__ */

#endif /* __MLCSTATUS_H__ */
